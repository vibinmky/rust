use std::mem;

fn main() {
    
    // 8 bit unsigned
    let a:u8 = 250;
    println!("a is {} and is using {} bytes",a, mem::size_of_val(&a));
    
    //mut keyword is used for muttable variable declaration
    let mut b= 1993821; //using 32 bit signed -> i32
    println!("b is {} and is using {} bytes",b, mem::size_of_val(&b));
    b=8;
    println!("b is {} and is using {} bytes",b, mem::size_of_val(&b));
    
    //isize usize allocate defaule os memmory
    let c:isize = 5;
    let size_of_c = mem::size_of_val(&c);
    println!("c is {} and is using {} bytes, {} bit os",c, size_of_c, 8* size_of_c);
    
    //charactor assignment
    let d='D';  // default it uses 32 bits
    println!("d is {} and is using {} bytes",d, mem::size_of_val(&d));
    
    let e:f32=2.5;  // default uses f64 -> 64 bits; if specified f32 uses 32 bits
    println!("e is {} and is using {} bytes",e, mem::size_of_val(&e));
    
    
    //boolean uses 8 bits
    let f=true;
    println!("f is {} and is using {} bytes",f, mem::size_of_val(&f));
    
    //operators
    //Arithematic
    let mut g = 5 + 2*4;    //basic opertions +-*/%
    g = g+1;    // There is no -- or ++ operations
    g -=4;      // -=  +=  *=  /=  %= can be used
    println!("g is {} ", g);
    
    println!("Remainder of {} by {} is {}",g,3, (g%3));
    
    let g_cubed = i32::pow(g,3);    //i32 is the output type
    println!("g cube is {}",g_cubed);
    
    let h = 2.5;
    let h_cubed = f64::powi(h,3);
    //  powi-> here i stands for integer is used to power ie) 3
    let h_to_pi = f64::powf(h,std::f64::consts::PI);
    //f -> float is used to power ie) pi
    println!("h cube is {}, and h to PI is {}",h_cubed, h_to_pi);
    
    //bitwise operators
    // | OR & AND ^ XOR !NOR
    let i = 1 | 2;
    println!(" 1 | 2 is {}",i);
    let two_to_10 = 1 << 10;
    println!("2 to 10 is {}",two_to_10);
    
    //logical operations
    // < > <= >=  ==
    let j = 2<3;     //true
    println!("2 < 3 is {}",j);
    let k = 5;
    println!("Is k equal to five --> {}", k==5);  //true
    
}

